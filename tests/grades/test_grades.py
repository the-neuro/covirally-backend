import pytest

from app.db.models.grades.handlers import get_grade_by_id
from app.types import Grades
from app.schemas import GetUser, CreateUser
from app.db.models.users.handlers import create_user
from app.api.auth.password_utils import get_password_hash

pytestmark = pytest.mark.asyncio
PASSWORD = "testpassword123!"


@pytest.fixture(scope="module")
async def access_token_and_creator(async_client) -> tuple[str, GetUser]:
    """
        Create creator, authorize it and get access token with username
        """
    email = "steve_111@apple.com"
    user_data = {
        "first_name": "Steve",
        "last_name": "Jobs",
        "username": "appleappleapple",
        "password": get_password_hash(PASSWORD),
        "email": email,
        "email_is_verified": True,
    }
    creator, _ = await create_user(CreateUser.construct(**user_data))

    auth_data = {"username": email, "password": PASSWORD}
    auth_response = await async_client.post("/auth/token", data=auth_data)

    access_token = auth_response.json()["access_token"]
    return access_token, creator


@pytest.fixture(scope="module")
async def access_token_and_user(async_client) -> tuple[str, GetUser]:
    """
    Create user, authorize it and get access token with username
    """
    email = "steve_222@apple.com"
    user_data = {
        "first_name": "Steve",
        "last_name": "Jobs",
        "username": "subscriber",
        "password": get_password_hash(PASSWORD),
        "email": email,
        "email_is_verified": True,
    }
    user, _ = await create_user(CreateUser.construct(**user_data))

    auth_data = {"username": email, "password": PASSWORD}
    auth_response = await async_client.post("/auth/token", data=auth_data)

    access_token = auth_response.json()["access_token"]
    return access_token, user


@pytest.mark.parametrize(
    "valid_data",
    (
        ({
            "grade_variant": Grades.SUBSCRIBED,
        }),
        ({
            "grade_variant": Grades.PAYED_POST,
        }),
        ({
            "grade_variant": Grades.PAYED_SUBSCRIBED,
        }),
        ({
            "grade_variant": Grades.TEAM_CREATOR,
        }),
        ({
            "grade_variant": Grades.IS_CREATOR,
        }),
    ),
)
async def test_valid_cases_create_grade_by_user(
    async_client,
    valid_data,
    access_token_and_creator,
    access_token_and_user
):
    creator_access_token, creator = access_token_and_creator
    creator_auth_header = f"Bearer {creator_access_token}"
    access_token, user = access_token_and_user
    auth_header = f"Bearer {access_token}"
    valid_data['creator_id'] = creator.id

    # generate grades for testing
    responce = await async_client.post("/tasks/subscribe",
                                       json=valid_data,
                                       headers={"Authorization": auth_header})
    assert responce.status_code == 201, responce.text

    grade_responce = responce.json()

    # autogenerated fields are in response
    assert "id" in grade_responce
    assert "user_id" in grade_responce
    assert "grade_variant" in grade_responce
    assert "grade_variant_int" in grade_responce
    assert "grade_rights" in grade_responce
    assert "degrades_at" not in grade_responce
    assert "task" not in grade_responce

    # check if creator was added
    assert "creator_id" in grade_responce

    grade_id = grade_responce["id"]
    grade_in_db = await get_grade_by_id(grade_id)
    assert grade_in_db is not None, f"Task {grade_id} is not in db after POST /tasks"

    assert grade_in_db.user_id == valid_data["user_id"]
    assert grade_in_db.grade_variant == valid_data["grade_variant"]
